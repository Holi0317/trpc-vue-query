name: Release

on:
  workflow_dispatch:

concurrency:
  group: "deploy"
  cancel-in-progress: false

jobs:
  git-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: "${{ steps.tag.outputs.version }}"
      tag: "${{ steps.tag.outputs.tag }}"
    steps:
      - uses: actions/checkout@v4

      - name: "Create git tag"
        id: "tag"
        run: |
          expected_v="$(cat package.json | jq -r .version)"
          for p in packages/client/package.json packages/h3-adapter/package.json; do
            v="$(cat $p | jq -r .version)"
            if [ "$expected_v" != "$v" ]; then
              echo "Package $p expected to have version $expected_v but got $v. Make sure all packages are at the same version before running this workflow."
              exit 1
            fi
          done

          tag="v$expected_v"
          if git rev-parse "$tag" >/dev/null 2>&1; then
            # Tag already exist. Bailing
            echo "Tag $tag already exist in git. Update the version on main branch before running this workflow."
            exit 1
          fi

          git tag "$tag"
          git push origin "$tag"

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

  release-gh:
    runs-on: ubuntu-latest
    needs:
      - git-tag
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Enable corepack"
        run: corepack enable
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: "Install packages"
        run: pnpm install

      - name: "Generate changelog and create GitHub release"
        env:
          GIT_TAG: "${{needs.git-tag.outputs.tag}}"
        run: |
          pnpm exec git cliff | gh release create "$GIT_TAG" -F -

  release-npm:
    runs-on: ubuntu-latest
    needs:
      - git-tag

    permissions:
      contents: read
      # For provenance statement on npm.
      # See https://docs.npmjs.com/generating-provenance-statements
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: "Enable corepack"
        run: corepack enable
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: "Install packages"
        run: pnpm install

      - name: "Publish packages to npm registry"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> $HOME/.npmrc
          pnpm publish --provenance --access public --recursive
